classdef TestFeaturizerSynthetic < Test
  %TESTFEATURIZERSYNTHETIC Test the synthetic featurizer class.
  %
  %   Tests the general operation of FeaturizerSynthetic.
  
  
  properties
    
    % parameters
    params = struct( ...
      'environment', [], ...
      'agent', 'NAC', ...
      'iterations', 10, ...
      'episodesIt', 20, ...
      'trainMaxSteps', 50, ...
      'stepsizeA', 1, ...
      'actor', @AgentNaturalActorCritic, ...
      'critic', @LSPELambda, ...
      'lambda', 0.5 );
    
    % parameter ranges
    paramRanges = struct();   % filled in constructor
    
  end
  
  methods
    
    function this = TestFeaturizerSynthetic()
      
      for i=1:8
        this.paramRanges.environment{i} = FeaturizerSynthetic( ...
          'containedEnvironment', GraphSynthetic( ...
            'synthSeed', i, ...
            'sCount', 3^ceil(i/2), ...   % 3..81
            'aCount', 9 - i, ...   % 8..1
            'dimsMdp', ceil(i/2), ...
            'dimsPomdp', ceil(i/3), ...
            'PSynthMean', i/8, ...
            'PSynthVariance', i/4, ...
            'OSynthVariance', (i-1) / 8 + eps ), ...
          'synthSeed', i+1000, ...
          'oDim', ceil(i/3), ...
          'aDim', mod(i-3,8)+1, ...
          'oSynthVarShape', (i-1)/4, ...
          'aSynthVarShape', (8-i)/6, ...
          'doTruncateO', logical(mod(i,2)), ...
          'doTruncateA', logical(mod(i+1,2)), ...
          'useContainedGrid', logical(mod(i,3)) );
        this.paramRanges.environment{i}.construct();
      end
      
    end
    
    function expr = run( this )
      
      expr = Experiment();
      expr.trainFunc = @train;
      expr.firstSeed = 1;
      expr.repeats = 1;
      expr.params = this.params;
      expr.paramRanges = this.paramRanges;
      
      run( expr );
      
    end
    
  end
  
end

